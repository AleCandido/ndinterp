/// This example uses the cubic_2d interpolation to perform PDF interpolation
/// in x and q2, the example values have been obtained with LHAPDF6
use ndarray::array;
use ndinterp::grid::cubic::{Cubic, Interpolator};
use ndinterp::grid::Grid;

fn main() {
    println!("Testing 2d cubic interpolation: pdf(x, Q)");

    let q2s = array![
        2.7224999999999997,
        3.19493746374544,
        3.77488100476809,
        4.491749966750009,
        5.384302568099999,
        6.50400152667136,
        7.91973571100625,
        9.72449464910884,
        12.044908183506251,
        15.05498278164001,
        18.996100349542562,
        24.2064
    ];

    let xs = array![
        1e-09,
        1.2970848e-09,
        1.682429e-09,
        2.1822532e-09,
        2.8305674e-09,
        3.671486e-09,
        4.7622286e-09,
        6.1770143e-09,
        8.0121111e-09,
        1.0392387e-08
    ];

    // The shape of the grid is (xs, q2s)
    let grid = array![
        [
            1.4254154, 1.6776221, 1.9779423, 2.3301677, 2.7384271, 3.208809, 3.7459114, 4.3567358,
            5.0564025, 5.8397619, 6.7288452, 7.7210728
        ],
        [
            1.3883271, 1.6330362, 1.9235433, 2.2634241, 2.6566105, 3.1088119, 3.6245234, 4.210425,
            4.8802442, 5.6305516, 6.4812223, 7.4270365
        ],
        [
            1.3523091, 1.58968, 1.8706203, 2.1985029, 2.5770725, 3.0116829, 3.5067205, 4.0685539,
            4.7096378, 5.4280412, 6.2416726, 7.143068
        ],
        [
            1.3173321, 1.5475209, 1.8191351, 2.1353577, 2.4997545, 2.9173467, 3.3924067, 3.9310011,
            4.5444235, 5.2320391, 6.0099649, 6.8688497
        ],
        [
            1.2833676, 1.5065272, 1.7690508, 2.0739431, 2.4245997, 2.8257303, 3.2814885, 3.797649,
            4.3844464, 5.042359, 5.7858739, 6.6040738
        ],
        [
            1.2503879, 1.4666682, 1.7203314, 2.0142153, 2.351553, 2.7367624, 3.1738748, 3.6683826,
            4.2295559, 4.8588196, 5.5691805, 6.3484422
        ],
        [
            1.2183663, 1.4279141, 1.6729422, 1.9561316, 2.2805607, 2.650374, 3.0694773, 3.5430904,
            4.0796057, 4.6812448, 5.3596711, 6.1016666
        ],
        [
            1.1872767, 1.3902362, 1.6268496, 1.8996507, 2.2115707, 2.5664977, 2.96821, 3.4216639,
            3.9344539, 4.5094631, 5.1571381, 5.8634675
        ],
        [
            1.157094, 1.3536065, 1.5820207, 1.8447325, 2.1445323, 2.4850684, 2.8699893, 3.3039973,
            3.7939625, 4.3433078, 4.9613791, 5.6335746
        ],
        [
            1.1277938, 1.317998, 1.5384239, 1.7913379, 2.0793964, 2.4060223, 2.774734, 3.1899881,
            3.6579978, 4.182617, 4.7721972, 5.4117256
        ]
    ];

    let logq2 = q2s.mapv(f64::ln);
    let logxs = xs.mapv(f64::ln);

    let xgrid = vec![logxs.to_vec(), logq2.to_vec()];

    let grid = Grid {
        xgrid,
        values: grid,
    };

    let example_x = array![3e-9, 4.7622286e-09].mapv(f64::ln);
    let example_q = array![5., 9.72449464910884].mapv(f64::ln);
    let example_pdf = array![2.262049289694598, 3.5430904];

    let cubic_interpolator = Cubic { grid };

    for (i, qval) in example_q.iter().enumerate() {
        let x = example_x[i];
        let query_example = [x, *qval];
        let val = cubic_interpolator.interpolate(&query_example).unwrap();

        println!(
            "Interpolated value: pdf({:+.2e}, {:.3}) = {:.4} (lhapdf = {:.4})",
            f64::exp(x),
            f64::exp(*qval),
            val,
            example_pdf[i]
        );
    }
}
